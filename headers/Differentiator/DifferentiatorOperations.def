// OPERATOR (NAME, DESIGNATION, PRIORITY, EVAL_CALLBACK, LATEX_CALLBACK, DIFF_CALLBACK, NEUTRAL_ELEMENTS, ...)

OPERATOR (EQUALS, "=", 4, {
    evalValue = EvalSubtree (left);
}, {
    WriteUnaryOperation ("=");
}, {
    currentNode = OperationNode (Diff (left), NULL, EQUALS);
}, {{}})

OPERATOR (ADD, "+", 4, {
    evalValue = EvalSubtree (left) + EvalSubtree (right);
}, {
    WriteBinaryOperation ("+"); 
}, {
    currentNode = Add (Diff (left), Diff (right));
}, {
    NeutralElement {0, NAN, CollapseResult::EXPRESSION_NOT_CHANGED, (Tree::TreeEdge) (Tree::LEFT_CHILD | Tree::RIGHT_CHILD)},
})

OPERATOR (SUB, "-", 4, {
    evalValue = EvalSubtree (left) - EvalSubtree (right);
}, {
    WriteBinaryOperation ("-");
}, {
    currentNode = Sub (Diff (left), Diff (right));
}, {
    NeutralElement {0, NAN, CollapseResult::EXPRESSION_NOT_CHANGED, (Tree::TreeEdge) (Tree::LEFT_CHILD | Tree::RIGHT_CHILD)},
})

OPERATOR (MUL, "*", 3, {
    evalValue = EvalSubtree (left) * EvalSubtree (right);
}, {
    WriteBinaryOperation ("\\cdot");
}, {
    currentNode = Add (Mul (Diff (left), Copy (right)), Mul (Copy (left), Diff (right)));
}, {
    NeutralElement {0, 0,   CollapseResult::COLLAPSED_TO_CONSTANT,  (Tree::TreeEdge) (Tree::LEFT_CHILD | Tree::RIGHT_CHILD)},
    NeutralElement {1, NAN, CollapseResult::EXPRESSION_NOT_CHANGED, (Tree::TreeEdge) (Tree::LEFT_CHILD | Tree::RIGHT_CHILD)},
})

OPERATOR (DIV, "/", 3, {
    evalValue = EvalSubtree (left) / EvalSubtree (right);
}, {
    WriteWithErrorCheck  (printBuffer, "\\frac{");
    WriteBinaryOperation ("}{");
    WriteWithErrorCheck  (printBuffer, "}");
}, {
    currentNode = Div (Sub (Mul (Diff (left), Copy (right)), Mul (Diff (right), Copy (left))), Pow (Copy (right), Const (2)));
}, {
    NeutralElement {0, 0,   CollapseResult::COLLAPSED_TO_CONSTANT,  Tree::LEFT_CHILD} ,
    NeutralElement {1, NAN, CollapseResult::EXPRESSION_NOT_CHANGED, Tree::RIGHT_CHILD},
})

OPERATOR (POW, "^", 1, {
    evalValue = pow (EvalSubtree (left), EvalSubtree (right)); 
}, {
    WriteWithErrorCheck (printBuffer, "{");
    WriteBinaryOperation ("}^{");
    WriteWithErrorCheck (printBuffer, "}");
}, {
    currentNode = Mul (Pow (Copy (left), Copy (right)), Add (Mul (Diff (right), Ln (Copy (left))), Div (Copy (right), Copy (left))));
}, {
    NeutralElement {0, 1,   CollapseResult::COLLAPSED_TO_CONSTANT,  Tree::RIGHT_CHILD},
    NeutralElement {0, 0,   CollapseResult::COLLAPSED_TO_CONSTANT,  Tree::LEFT_CHILD} ,
    NeutralElement {1, NAN, CollapseResult::EXPRESSION_NOT_CHANGED, Tree::RIGHT_CHILD},
})

OPERATOR (SIN, "sin", 2, {
    evalValue = sin (EvalSubtree (left));
}, {
    WriteUnaryOperation ("sin");
}, {
    currentNode = Mul (Diff (left), Cos (Copy (left)));
}, {{}})

OPERATOR (COS, "cos", 2, {
    evalValue = cos (EvalSubtree (left));
}, {
    WriteUnaryOperation ("cos");
}, {
    currentNode = Mul (Diff (left), Mul (Const (-1), Sin (Copy (left))));
}, {{}})

OPERATOR (SQRT, "sqrt", 2, {
    evalValue = sqrt (EvalSubtree (left));
}, {
    WriteUnaryOperation ("\\sqrt {");
    WriteWithErrorCheck (printBuffer, "}");
}, {
    currentNode = Div (Diff (left), Mul (Const (2), Sqrt (Copy (left))));
}, {{}})

OPERATOR (LN, "ln", 2, {
    evalValue = log (EvalSubtree (left));
}, {
    WriteUnaryOperation ("\\log {");
    WriteWithErrorCheck (printBuffer, "}");
}, {
    currentNode = Div (Diff (left), Copy (left));
}, {{}})

OPERATOR (EXP, "exp", 2, {
    evalValue = exp (EvalSubtree (left));
}, {
    WriteUnaryOperation ("e^{");
    WriteWithErrorCheck (printBuffer, "}");
}, {
    currentNode = Mul (Diff (left), Exp (Copy (left))); 
}, {{}})
